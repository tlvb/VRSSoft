#!/usr/bin/env python

import time, sys, os

#def mkchangeset(newset, oldset):
#	changeset = {}
#	for k in oldset.keys():
#		if oldset[k] != newset[k]:
#			changeset[k] = newset[k]
#	return changeset

def setoutput(device, channel, value, masterfader):
	device.write('{0:x}:{1:x}\n'.format(channel, int(value*masterfader)))

def seedlamps(device, lampset, value, masterfader):
	for lamp in lampset:
		setoutput(device, lamp, value, masterfader)

def chasestep(device, newlamp, wagon, values, masterfader):
	wagon = [newlamp] + wagon[:-1]
	for i in range(len(wagon)):
		setoutput(device, wagon[i], values[i], masterfader)
	device.flush()
	print(wagon)
	return wagon

	

devicefile = '/tmp/dmxctl'
if not os.path.exists(devicefile):
	sys.stderr.write("device '{}' does not exist.\n".format(devicefile))
	sys.exit()

device = open(devicefile, 'w')
dummy = open(devicefile, 'r')
print('device opened')

lampset = [i for i in range(24)]
wagon = lampset[1:14]


#          @
#          |
#        @ | @
#      @ | | | @
#    @-+-+-+-+-+-@-+-+-+-+-+-@
#                  @ | | | @
#                    @ | @
#                      |
#                      @


values = [0, 1, 2, 4, 2, 1, 0, -1, -2, -4, -2, -1, 0]
values = [v*2 + 8 for v in values]
masterfader = 1.0



seedlamps(device, lampset, 0x8, masterfader)

while True:
	for lamp in lampset:
		wagon = chasestep(device, lamp, wagon, values, masterfader)
		time.sleep(1.0/16.0)

